// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"context"
	"github.com/etwicaksono/go-hexagonal-architecture/config"
	"github.com/etwicaksono/go-hexagonal-architecture/internal/adapter/app/example_app"
	"github.com/etwicaksono/go-hexagonal-architecture/internal/adapter/core/example_core"
	"github.com/etwicaksono/go-hexagonal-architecture/internal/adapter/primary/grpc"
	"github.com/etwicaksono/go-hexagonal-architecture/internal/adapter/primary/rest"
	"github.com/etwicaksono/go-hexagonal-architecture/internal/adapter/primary/rest/docs"
	"github.com/etwicaksono/go-hexagonal-architecture/internal/adapter/primary/rest/example_rest"
	"github.com/etwicaksono/go-hexagonal-architecture/router"
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
)

// Injectors from injector.go:

func LoggerInit() error {
	configConfig := config.LoadConfig()
	error2 := loggerInit(configConfig)
	return error2
}

func RestProvider(ctx context.Context) *fiber.App {
	configConfig := config.LoadConfig()
	swaggerHandlerInterface := docs.NewDocumentationHandler(configConfig)
	exampleCoreInterface := example_core.NewExampleCore()
	exampleAppInterface := example_app.NewExampleApp(exampleCoreInterface)
	exampleHandlerInterface := example_rest.NewExampleRestHandler(exampleAppInterface)
	routerRouter := router.NewRouter(swaggerHandlerInterface, exampleHandlerInterface)
	app := rest.NewRestApp(ctx, configConfig, routerRouter)
	return app
}

func GrpcHandlerProvider() grpc.Handler {
	exampleCoreInterface := example_core.NewExampleCore()
	exampleAppInterface := example_app.NewExampleApp(exampleCoreInterface)
	handler := grpcHandlerProvider(exampleAppInterface)
	return handler
}

// injector.go:

var configSet = wire.NewSet(config.LoadConfig)

var exampleSet = wire.NewSet(example_core.NewExampleCore, example_app.NewExampleApp)

var restSet = wire.NewSet(example_rest.NewExampleRestHandler)

var routerSet = wire.NewSet(
	restSet, docs.NewDocumentationHandler, router.NewRouter,
)
