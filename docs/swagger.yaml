openapi: 3.0.3
info:
  title: Example API - OpenAPI 3.0
  description: |-
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quas dolor nemo laudantium perferendis voluptas ipsam, illum optio, quidem porro, accusamus fuga explicabo ab dignissimos voluptates? Quaerat iste eligendi odio voluptatum. Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore aspernatur maxime eligendi accusamus eaque porro quaerat repellat inventore, ullam voluptatibus quod molestias quae ab. Expedita corporis ab id pariatur omnis. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Pariatur nesciunt sint obcaecati eligendi beatae velit! Repellendus accusantium, rerum suscipit, quaerat nam commodi, unde eligendi explicabo architecto provident reprehenderit temporibus distinctio.

  contact:
    email: etwicaksono@dutacorpora.id
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: {{ .ServerUrl }}
    description: {{ .ServerDescription }}
tags:
  - name: Authentication
    description: Authentication related operations
  - name: Example Messaging
    description: Example messaging operations
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Registers a new user with the provided details.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login to the application
      description: Authenticates the user and returns access and refresh tokens.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse200'
        '401':
          description: Unauthorized, invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse401'
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout the user
      description: Logs out the user by invalidating the current session token.
      security:
        - BearerAuth: [ ]  # Requires Bearer token for authentication
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse200'
        '401':
          description: Unauthorized, missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh Access Token
      description: Allows a user to refresh their access token using a refresh token.
      security:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRefreshRequest'
      responses:
        '200':
          description: Successfully refreshed the token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRefreshResponse200'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRefreshResponse400'

  /example/message/text:
    post:
      summary: Send Text Message
      description: Allows a user to send a text message with a specified sender, receiver, and message content.
      tags:
        - Example Messaging
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendTextMessageRequest'
      responses:
        '200':
          description: Successfully sent the text message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendTextMessageResponse200'
        '401':
          description: Unauthorized, invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
    get:
      summary: Get Text Messages
      description: Retrieves a list of text messages.
      tags:
        - Example Messaging
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully retrieved text messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTextMessageResponse200'
        '401':
          description: Unauthorized, invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
  /example/message/multimedia:
    post:
      tags:
        - Example Messaging
      security:
        - BearerAuth: []
      summary: Send multimedia message
      description: Send a multimedia message to a specified receiver with attached files.
      operationId: sendMultimediaMessage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendMultimediaMessageRequest'
      responses:
        '200':
          description: Multimedia message sent successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMultimediaMessageResponse200'
        '401':
          description: Unauthorized request, invalid or expired token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
    get:
      tags:
        - Example Messaging
      security:
        - BearerAuth: []
      summary: Retrieve multimedia messages
      description: Fetch a list of multimedia messages with associated metadata.
      operationId: getMultimediaMessages
      responses:
        '200':
          description: Successful retrieval of multimedia messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMultimediaMessageResponse200'
        '401':
          description: Unauthorized request, invalid or expired token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedResponse'
        '500':
          description: Internal server error
components:
  schemas:
    UnauthorizedResponse:
      type: object
      properties:
        code:
          type: integer
          example: 401
        status:
          type: string
          example: "Unauthorized"
        message:
          type: string
          example: "unauthorized"
        data:
          type: object
          nullable: true
          example: null
        meta:
          type: object
          nullable: true
          example: null
        errors:
          type: object
          nullable: true
          example: null

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse200:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "authenticated"
        data:
          type: object
          properties:
            access_token:
              type: string
              description: JWT access token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expired_at:
              type: string
              format: date-time
              example: "2024-11-13T06:40:14.9626844+07:00"
            refresh_token:
              type: string
              description: JWT refresh token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshable_until:
              type: string
              format: date-time
              example: "2024-11-13T11:40:14.9626844+07:00"
        meta:
          type: object
          nullable: true
          example: null
        errors:
          type: object
          nullable: true
          example: null
    LoginResponse401:
      type: object
      properties:
        code:
          type: integer
          example: 401
        status:
          type: string
          example: "Unauthorized"
        message:
          type: string
          example: "invalid login credentials"
        data:
          type: "null"
        meta:
          type: "null"
        errors:
          type: object
          properties:
            password:
              type: string
              example: "Invalid username or password"
            username:
              type: string
              example: "Invalid username or password"

    LogoutResponse200:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Logout success"
        data:
          type: object
          nullable: true
          example: null
        meta:
          type: object
          nullable: true
          example: null
        errors:
          type: object
          nullable: true
          example: null

    AuthRefreshRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: "The refresh token required to obtain a new access token."
      required:
        - refresh_token
    AuthRefreshResponse200:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: "Token refreshed"
        data:
          type: object
          properties:
            access_token:
              type: string
              description: "The new access token for authenticated requests."
            expired_at:
              type: string
              format: date-time
              description: "The expiration date and time of the new access token."
            refresh_token:
              type: string
              description: "A new refresh token if the previous one has been rotated."
            refreshable_until:
              type: string
              format: date-time
              description: "The last date and time the refresh token can be used."
        meta:
          type: object
          nullable: true
          example: null
        errors:
          type: object
          nullable: true
          example: null
      
    AuthRefreshResponse400:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          example: Bad Request
        message:
          type: string
          example: "invalid token"
        data:
          type: object
          nullable: true
          example: null
        meta:
          type: object
          nullable: true
          example: null
        errors:
          type: object
          nullable: true
          example: null

    RegisterRequest:
      type: object
      required:
        - email
        - name
        - password
        - username
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        password:
          type: string
        username:
          type: string
    RegisterResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Register user success"
        data:
          type: object
          nullable: true
          example: null
        meta:
          type: object
          nullable: true
          example: null
        errors:
          type: object
          nullable: true
          example: null

    SendTextMessageRequest:
      type: object
      properties:
        sender:
          type: string
          description: "The sender of the message."
        receiver:
          type: string
          description: "The receiver of the message."
        message:
          type: string
          description: "The content of the message."
      required:
        - sender
        - receiver
        - message
    SendTextMessageResponse200:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: "Send text message success"
        data:
          type: object
          nullable: true
          example: null
        meta:
          type: object
          nullable: true
          example: null
        errors:
          type: object
          nullable: true
          example: null
    GetTextMessageResponse200:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: "Get text message success"
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: "Unique identifier for the message."
                example: "66f1bc0c5ea328c2e2c2a254"
              sender:
                type: string
                description: "The sender of the message."
                example: "sender"
              receiver:
                type: string
                description: "The receiver of the message."
                example: "receiver"
              message:
                type: string
                description: "The content of the message."
                example: "halo"
        meta:
          type: object
          nullable: true
          example: null
        errors:
          type: object
          nullable: true
          example: null

    SendMultimediaMessageRequest:
      type: object
      required:
        - sender
        - receiver
        - message
        - files
        - storage
      properties:
        sender:
          type: string
          description: The sender of the message.
        receiver:
          type: string
          description: The receiver of the message.
        message:
          type: string
          description: The content of the message.
        files:
          type: array
          items:
            type: string
            format: binary
          description: Files to be attached in the message.
        storage:
          type: string
          enum:
            - LOCAL
            - MINIO
          description: The storage type where files are stored.
    SendMultimediaMessageResponse200:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Send multimedia message success"
        data:
          type: object
          nullable: true
          example: null
        meta:
          type: object
          nullable: true
          example: null
        errors:
          type: object
          nullable: true
          example: null
    GetMultimediaMessageResponse200:
      type: object
      properties:
        code:
          type: integer
          example: 200
        status:
          type: string
          example: success
        message:
          type: string
          example: Get multimedia message success
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 66f1bc0c5ea328c2e2c2a254
              sender:
                type: string
                example: sender
              receiver:
                type: string
                example: receiver
              message:
                type: string
                example: halo
              fileUrls:
                type: array
                items:
                  type: string
                example: [ "http://localhost:9000/example/example/1685382363-1727118406365912800.jpg", "http://localhost:9000/example/example/1685382658-1727118406430732800.jpg" ]

  securitySchemes:
    BearerAuth:             # Name of the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT     # Optional, describes the token format (e.g., JWT, OAuth)